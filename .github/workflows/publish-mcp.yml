name: Publish MCP Server to Registry

on:
  # Triggers the workflow on a new release creation.
  release:
    types: [published]
  # Allows manual runs via the GitHub Actions UI.
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      # Required for OIDC authentication by mcp-publisher
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Release Tag Version
        id: get_version
        run: |
          # Install jq for JSON manipulation
          sudo apt-get install -y jq
          
          # The MCP registry expects the version in server.json to match the release tag.
          # We use the tag name (e.g., v1.2.3) and strip the 'v' prefix (e.g., 1.2.3)
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION_TAG="${{ github.event.release.tag_name }}"
            VERSION="${VERSION_TAG#v}"
            echo "Release detected: $VERSION_TAG -> $VERSION"
            
            # Update server.json version to match the release tag
            jq --arg ver "$VERSION" '.version = $ver' server.json > server.json.tmp
            mv server.json.tmp server.json
            echo "Updated server.json version to $VERSION"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual runs, use the current version from server.json
            VERSION=$(jq -r '.version' server.json)
            echo "Manual run - using existing version from server.json: $VERSION"
          else
            echo "Unexpected event: ${{ github.event_name }}"
            exit 1
          fi
          
          # Export VERSION as step output for use in other steps
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Install MCP Publisher CLI
        run: |
          # Download the latest mcp-publisher binary directly
          curl -L "https://github.com/modelcontextprotocol/registry/releases/latest/download/mcp-publisher_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/').tar.gz" | tar xz mcp-publisher
          chmod +x mcp-publisher
          sudo mv mcp-publisher /usr/local/bin/

      - name: Publish server to Registry
        run: |
          # Login using GitHub OIDC (no secrets required)
          echo "Authenticating with MCP Registry..."
          mcp-publisher login github-oidc
          
          # Show current server.json content for debugging
          echo "Current server.json content:"
          cat server.json
          echo ""
          
          # Show mcp-publisher version and validate config
          echo "MCP Publisher version:"
          mcp-publisher --version
          echo ""
          
          echo "Validating server.json..."
          mcp-publisher validate
          echo ""
          
          # Publish the server
          echo "Publishing server..."
          mcp-publisher publish --verbose
          echo "Successfully published io.jfrog/jfrog-mcp-server v${{ steps.get_version.outputs.version }}"

      - name: Verify publication
        run: |
          echo "Waiting for registry to update..."
          sleep 30
          echo "Verifying publication in MCP registry..."
          if curl -s "https://registry.modelcontextprotocol.io/v0/servers?search=io.jfrog/jfrog-mcp-server" | grep -q "jfrog-mcp-server"; then
            echo "✅ Server successfully published and visible in registry"
          else
            echo "⚠️  Server may not be visible in registry yet (could take some time)"
          fi